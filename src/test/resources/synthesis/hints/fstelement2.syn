should be able to retrieve first element with help of complete examples, parameterized by set
the first element of a SLL

prev def
{true ; ret :-> x ** [x,2]  ** x :-> v ** (x+1) :-> nxt ** lseg(nxt, 0, S1)}
void fstelement2(loc ret)
{true ;  ret :-> v ** lseg(x, 0, S)}


#######

{true ; ret :-> x ** lseg(x, 0, S1)}
void fstelement2(loc ret)
{true ;  ret :-> v ** lseg(x, 0, S)}

######

[ret :-> x ** x :-> v] [ret :-> v  ]

#########
{true ;  ret :-> w ** lseg(x, 0, S)}


// ret points to the head of the SLL, hd points to the second element of the SLL (represented as lsegs)
void fstElement (loc ret, loc y) {
  let x = *ret; //  store value of hd at x
  let h = *x; // store value pointed to by hd
  free(x); // free hd
  *ret = h; // return value pointed to by hd (which is second element)
}

short circuit by checking example and specification

x != 0 because x is x :-> but lseg(x) implies x == 0

focus on write2 for the motivatoin and non-determinism in the rules because that would be a good starting point for people unfamiliar (write2)
if-else branch of the unfolding lseg would imply that x == 0 for if branch but in the pointsto thing we know that x!= 0 so we can basically shortcircuit
 and not explore the branch.


change pictures to legit latex